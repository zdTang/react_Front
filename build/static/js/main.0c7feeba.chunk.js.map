{"version":3,"sources":["config/redditToken.js","RedditApi.js","components/Result.jsx","components/Search.jsx","components/Title.jsx","reportWebVitals.js","index.js"],"names":["token","snoowrap","userAgent","clientId","clientSecret","username","password","Result","props","state","display","count","id","this","Component","Search","SearchReddit","alert","setState","result","className","type","placeholder","onClick","bind","Title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAOA,EAEI,sHAFJA,EAGG,iBAHHA,EAIO,iCAJPA,EAKG,YALHA,EAMG,gBCFI,I,OAAIC,GAAS,CACrBC,UAAWF,EACXG,SAAUH,EACVI,aAAcJ,EACdK,SAAUL,EACVM,SAAUN,I,WCPKO,E,kDAElB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACNC,QAAQF,EAAME,QACdC,MAAMH,EAAMG,OAJH,E,0CASjB,WACI,OAEI,sBAAKC,GAAG,UAAR,UACA,iDAAoBC,KAAKL,MAAME,WAC/B,+CAAkBG,KAAKL,MAAMG,gB,GAhBLG,aCCfC,E,kDACjB,WAAYP,GAAO,IAAD,8BACd,cAAMA,IAeXQ,aAAa,WAEZC,MAAM,QACH,EAAKC,SAAS,CACVC,OAAQ,EAAKV,MAAMU,OAAQ,OAC3BR,MAAO,EAAKF,MAAME,MAAM,KAnB3B,EAAKF,MAAM,CACPU,OAAO,OACPR,MAAO,GAJG,E,0CAyBlB,WACI,OACI,sBAAKC,GAAG,mBAAmBQ,UAAU,YAArC,UACA,sBAAKR,GAAG,SAASQ,UAAU,+BAA3B,UACA,kDACA,6CAAgBP,KAAKJ,MAAMU,UAGvB,uBAAOE,KAAK,OAAOT,GAAG,eAAeQ,UAAU,oBAAoBE,YAAY,mBAEjF,wBAAQD,KAAK,SAASD,UAAU,8BAA8BG,QAASV,KAAKG,aAAaQ,KAAKX,KAAK,QAAnG,uBAGF,cAAC,EAAD,CAAQH,QAASG,KAAKJ,MAAMU,OAAQR,MAAOE,KAAKJ,MAAME,QACtD,6BAAKE,KAAKJ,MAAMU,SAChB,6BAAKN,KAAKJ,MAAME,e,GAzCQG,aCHrB,SAASW,IAEpB,OACI,qBAAKL,UAAU,qCAAf,SACA,qBAAKA,UAAU,YAAf,SACE,sBAAMA,UAAU,eAAhB,yB,WCOKM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCIdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACA,cAACZ,EAAD,IACA,cAAC,EAAD,OAEAa,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0c7feeba.chunk.js","sourcesContent":[" const token={\r\n\r\nuserAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36',\r\nclientId: 'h8PCl1ykdWxcAA',\r\nclientSecret: 'TCmMJItd9icxcePzJ-CgRe-1TXPCUw',\r\nusername: 'mike-tang',\r\npassword: 'Tl6902856@@$$'\r\n\r\n}\r\n\r\nconst ApiOption={\r\n    HotPostNumber: 10\r\n\r\n}\r\n\r\n\r\nexport {token,ApiOption}","\r\n  import snoowrap from'snoowrap';\r\n  import {token,ApiOption} from './config/redditToken'\r\n\r\n    const r = new snoowrap({\r\n      userAgent: token.userAgent,\r\n      clientId: token.clientId,\r\n      clientSecret: token.clientSecret,\r\n      username: token.username,\r\n      password: token.password\r\n    });\r\n  \r\n    //r.getHot().map(post => post.title).then(console.log);\r\n   // Automating moderation tasks\r\n  //  async function getSub(){\r\n  //     let result = await r.getSubreddit('some_subreddit_name').getModqueue({limit: 100});\r\n  //     return result; \r\n  // }\r\n  \r\n  async function getData(searchString) {\r\n    let MyResult=undefined;\r\n    //let response = await r.getSubreddit(searchString).getTop({time: 'all'}).then(result=>{MyResult=result});\r\n    await r.getSubreddit(searchString).getTop({time: 'all'}).then(result=>{MyResult=result});\r\n    return MyResult;\r\n  };\r\n  //r.getSubreddit('china').getTop({time: 'all'}).then(console.log)\r\n  \r\n  //let m=await getData()\r\n  //console.log(m);\r\n\r\n \r\n\r\n  async function GetSubRedditByHot(searchString) {\r\n    let MyResult=undefined;\r\n    await r.getSubreddit(searchString).getHot({limit:ApiOption.HotPostNumber}).then(result=>{MyResult=result});;\r\n    return MyResult;\r\n  }\r\n  \r\n  \r\n  export {getData, GetSubRedditByHot};","import React, { Component } from 'react'\r\n\r\nexport default class Result extends Component {\r\n   \r\n   constructor(props){\r\n       super(props)\r\n       this.state={\r\n            display:props.display,\r\n            count:props.count\r\n       }\r\n   }\r\n   \r\n   \r\n    render() {\r\n        return (\r\n\r\n            <div id=\"results\">\r\n            <h1>the display is {this.props.display}</h1>\r\n            <h1>the count is {this.props.count}</h1>\r\n            </div> \r\n            \r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {GetSubRedditByHot} from '../RedditApi'\r\nimport Result from './Result'\r\nexport default class Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            result:'haha',\r\n            count: 9\r\n        }\r\n    }\r\n    \r\n    //SearchReddit=()=>{\r\n        // alert(\"haha\");\r\n        // console.log(this.state.result);\r\n        // this.setState((nextState,props)=>({\r\n        //     result:nextState.result + \"  good\"\r\n        // }))\r\n        // console.log(this.state.result);\r\n   // }\r\n   SearchReddit=()=>{\r\n\r\n    alert(\"haha\");\r\n       this.setState({\r\n           result: this.state.result+ \"good\",\r\n           count: this.state.count+1\r\n       })\r\n   }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"search-container\" className=\"container\">\r\n            <div id=\"search\" className=\"card card-body bg-light mb-2\">\r\n            <h4>Search SubReddit</h4>\r\n            <h1>in Search=={this.state.result}</h1>\r\n\r\n\r\n                <input type=\"text\" id=\"search-input\" className=\"form-control mb-3\" placeholder=\"Search Term...\"/>\r\n          \r\n              <button type=\"submit\" className=\"btn btn-dark btn-block mt-4\" onClick={this.SearchReddit.bind(this,\"tang\")}>Search</button>\r\n\r\n            </div>     \r\n            <Result display={this.state.result} count={this.state.count}/>  \r\n            <h1>{this.state.result}</h1>\r\n            <h1>{this.state.count}</h1>   \r\n            </div>  \r\n            \r\n        )\r\n    }\r\n}\r\n","export default function Title(){\r\n\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-primary mb-3\">\r\n        <div className=\"container\">\r\n          <span className=\"navbar-brand\">Finddit</span>\r\n        </div>\r\n      </nav>\r\n    )\r\n\r\n\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import Cmp1 from './Cmp1';\n//import Result from './components/Result';\nimport Search from './components/Search';\nimport Title from './components/Title';\nimport './index.css';\n\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Title/>\n  <Search/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}